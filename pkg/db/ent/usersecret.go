// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/verification-door/pkg/db/ent/usersecret"
	"github.com/google/uuid"
)

// UserSecret is the model entity for the UserSecret schema.
type UserSecret struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSecret) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersecret.FieldCreateAt, usersecret.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case usersecret.FieldSecret:
			values[i] = new(sql.NullString)
		case usersecret.FieldID, usersecret.FieldUserID, usersecret.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserSecret", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSecret fields.
func (us *UserSecret) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersecret.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				us.ID = *value
			}
		case usersecret.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				us.UserID = *value
			}
		case usersecret.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				us.AppID = *value
			}
		case usersecret.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				us.Secret = value.String
			}
		case usersecret.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				us.CreateAt = uint32(value.Int64)
			}
		case usersecret.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				us.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserSecret.
// Note that you need to call UserSecret.Unwrap() before calling this method if this UserSecret
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSecret) Update() *UserSecretUpdateOne {
	return (&UserSecretClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the UserSecret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSecret) Unwrap() *UserSecret {
	tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSecret is not a transactional entity")
	}
	us.config.driver = tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSecret) String() string {
	var builder strings.Builder
	builder.WriteString("UserSecret(")
	builder.WriteString(fmt.Sprintf("id=%v", us.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", us.UserID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", us.AppID))
	builder.WriteString(", secret=")
	builder.WriteString(us.Secret)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", us.CreateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", us.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// UserSecrets is a parsable slice of UserSecret.
type UserSecrets []*UserSecret

func (us UserSecrets) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
