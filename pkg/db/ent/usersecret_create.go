// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/verification-door/pkg/db/ent/usersecret"
	"github.com/google/uuid"
)

// UserSecretCreate is the builder for creating a UserSecret entity.
type UserSecretCreate struct {
	config
	mutation *UserSecretMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (usc *UserSecretCreate) SetUserID(u uuid.UUID) *UserSecretCreate {
	usc.mutation.SetUserID(u)
	return usc
}

// SetSecret sets the "secret" field.
func (usc *UserSecretCreate) SetSecret(s string) *UserSecretCreate {
	usc.mutation.SetSecret(s)
	return usc
}

// SetCreateAt sets the "create_at" field.
func (usc *UserSecretCreate) SetCreateAt(u uint32) *UserSecretCreate {
	usc.mutation.SetCreateAt(u)
	return usc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (usc *UserSecretCreate) SetNillableCreateAt(u *uint32) *UserSecretCreate {
	if u != nil {
		usc.SetCreateAt(*u)
	}
	return usc
}

// SetDeleteAt sets the "delete_at" field.
func (usc *UserSecretCreate) SetDeleteAt(u uint32) *UserSecretCreate {
	usc.mutation.SetDeleteAt(u)
	return usc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (usc *UserSecretCreate) SetNillableDeleteAt(u *uint32) *UserSecretCreate {
	if u != nil {
		usc.SetDeleteAt(*u)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSecretCreate) SetID(u uuid.UUID) *UserSecretCreate {
	usc.mutation.SetID(u)
	return usc
}

// Mutation returns the UserSecretMutation object of the builder.
func (usc *UserSecretCreate) Mutation() *UserSecretMutation {
	return usc.mutation
}

// Save creates the UserSecret in the database.
func (usc *UserSecretCreate) Save(ctx context.Context) (*UserSecret, error) {
	var (
		err  error
		node *UserSecret
	)
	usc.defaults()
	if len(usc.hooks) == 0 {
		if err = usc.check(); err != nil {
			return nil, err
		}
		node, err = usc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserSecretMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = usc.check(); err != nil {
				return nil, err
			}
			usc.mutation = mutation
			if node, err = usc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(usc.hooks) - 1; i >= 0; i-- {
			if usc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = usc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSecretCreate) SaveX(ctx context.Context) *UserSecret {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSecretCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSecretCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSecretCreate) defaults() {
	if _, ok := usc.mutation.CreateAt(); !ok {
		v := usersecret.DefaultCreateAt()
		usc.mutation.SetCreateAt(v)
	}
	if _, ok := usc.mutation.DeleteAt(); !ok {
		v := usersecret.DefaultDeleteAt()
		usc.mutation.SetDeleteAt(v)
	}
	if _, ok := usc.mutation.ID(); !ok {
		v := usersecret.DefaultID()
		usc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSecretCreate) check() error {
	if _, ok := usc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := usc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`ent: missing required field "secret"`)}
	}
	if _, ok := usc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := usc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (usc *UserSecretCreate) sqlSave(ctx context.Context) (*UserSecret, error) {
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (usc *UserSecretCreate) createSpec() (*UserSecret, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSecret{config: usc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usersecret.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usersecret.FieldID,
			},
		}
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: usersecret.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := usc.mutation.Secret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usersecret.FieldSecret,
		})
		_node.Secret = value
	}
	if value, ok := usc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersecret.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := usc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: usersecret.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// UserSecretCreateBulk is the builder for creating many UserSecret entities in bulk.
type UserSecretCreateBulk struct {
	config
	builders []*UserSecretCreate
}

// Save creates the UserSecret entities in the database.
func (uscb *UserSecretCreateBulk) Save(ctx context.Context) ([]*UserSecret, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSecret, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSecretCreateBulk) SaveX(ctx context.Context) []*UserSecret {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSecretCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSecretCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
